/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mc.program;

import com.apple.eawt.Application;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Timer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.ToolTipManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileView;
import javax.swing.text.MaskFormatter;
import javax.swing.text.NumberFormatter;
import mc.program.util.ImagePanel;

/**
 *
 * @author nathanli
 */
public class MainFrame extends javax.swing.JFrame
{
    //SIZE OF MAINFRAME IS 801x512
    Expiration expire;
    Character aKey;
    Character bKey;
    Character cKey;
    Character dKey;
    Character eKey;
    Character nextKey;
    Character backKey;
    Test currentTest;
    ArrayList<Integer> wrongQuestions;
    ArrayList<String> wrongSelections;
    int currentWrong = -1;
    int reviewCount = 0;
    private Timer timer = new Timer();
    private String answerText;
    private Action aAction;
    private Action bAction;
    private Action cAction;
    private Action dAction;
    private Action eAction;
    private Action nextQAction;
    private Action backQAction;
    private Action nextAAction;
    private Action backAAction;
    int pX, pY;
    ArrayList<String> letters = new ArrayList(Arrays.asList("A", "B", "C", "D", "E"));
    CardLayout cardLayout;
    Calendar startingTime;
    Thread elapsedTime;

    Importer importer;
    File importFile;
    File saveFile;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings ("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        testStyleButtonGroup = new javax.swing.ButtonGroup();
        fileChooser = new javax.swing.JFileChooser();
        saveChooser = new javax.swing.JFileChooser();
        MainPanel = new javax.swing.JPanel();
        placeholder = new javax.swing.JPanel();
        selectionPanel = new javax.swing.JPanel();
        clusterListScroll = new javax.swing.JScrollPane();
        clusterList = new javax.swing.JList();
        resetHistoryButton = new javax.swing.JButton();
        settingsButton = new javax.swing.JButton();
        goInButton = new javax.swing.JButton();
        clusterTableScroll = new javax.swing.JScrollPane();
        clusterTable = new javax.swing.JTable();
        importButton = new javax.swing.JButton();
        scoreHistoryButton = new javax.swing.JButton();
        divider5 = new javax.swing.JLabel();
        welcomePanel = new javax.swing.JPanel();
        codeField = new javax.swing.JTextField();
        activateButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        guidePane = new javax.swing.JTextPane();
        activationStatusLabel = new javax.swing.JLabel();
        trialButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        testPanel = new javax.swing.JPanel();
        aButton = new javax.swing.JButton();
        bButton = new javax.swing.JButton();
        cButton = new javax.swing.JButton();
        dButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        questionNumber = new javax.swing.JLabel();
        pauseToggle = new javax.swing.JToggleButton();
        testName = new javax.swing.JLabel();
        correctLabel = new javax.swing.JLabel();
        incorrectLabel = new javax.swing.JLabel();
        scoreLabel = new javax.swing.JLabel();
        exitButton = new javax.swing.JButton();
        nextQuestionButton = new javax.swing.JButton();
        backToQuestionButton = new javax.swing.JButton();
        nextAnswerButton = new javax.swing.JButton();
        backAnswerButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        questionText = new javax.swing.JTextPane();
        timerPanel = new javax.swing.JPanel();
        timeRemaining = new javax.swing.JLabel();
        timeBox = new javax.swing.JLabel();
        answerLabel = new javax.swing.JLabel();
        eButton = new javax.swing.JButton();
        elapsedTimeLabel = new javax.swing.JLabel();
        elapsedTimeTimer = new javax.swing.JLabel();
        importerPanel = new javax.swing.JPanel();
        previewScollPane = new javax.swing.JScrollPane();
        previewTextArea = new javax.swing.JTextArea();
        previewLabel = new javax.swing.JLabel();
        fileNameLabel = new javax.swing.JLabel();
        selectFileButton = new javax.swing.JButton();
        questionIdentifierLabel = new javax.swing.JLabel();
        questionIdentifierExample = new javax.swing.JLabel();
        optionIdentifierLabel = new javax.swing.JLabel();
        optionIdentifierExample = new javax.swing.JLabel();
        answerIdentifierExample = new javax.swing.JLabel();
        answerIdentifierLabel = new javax.swing.JLabel();
        answerFormatLabel = new javax.swing.JLabel();
        answerFormatCombo = new javax.swing.JComboBox();
        divider0 = new javax.swing.JLabel();
        divider1 = new javax.swing.JLabel();
        divider2 = new javax.swing.JLabel();
        divider3 = new javax.swing.JLabel();
        divider4 = new javax.swing.JLabel();
        importTestButton = new javax.swing.JButton();
        saveNameLabel = new javax.swing.JLabel();
        saveFileButton = new javax.swing.JButton();
        saveToMainButton = new javax.swing.JButton();
        numberOfQuestionsLabel = new javax.swing.JLabel();
        maxNumberOfOptionsLabel = new javax.swing.JLabel();
        questionIdentifierField = new javax.swing.JFormattedTextField(createFormatter("#**"));
        numberOfQuestionsField = new javax.swing.JFormattedTextField(new NumberFormatter());
        optionIdentifierField = new javax.swing.JFormattedTextField(createFormatter("?**"));
        maxNumberOfOptionsField = new javax.swing.JFormattedTextField(createFormatter("#"));
        answerIdentifierField = new javax.swing.JFormattedTextField(createFormatter("#**"));
        jLabel2 = new javax.swing.JLabel();
        settingsPanel = new javax.swing.JPanel();
        shuffleBox = new javax.swing.JCheckBox();
        saveSettings = new javax.swing.JButton();
        aKeyField = new javax.swing.JFormattedTextField(createFormatter("U"));
        bKeyField = new javax.swing.JFormattedTextField(createFormatter("U"));
        cKeyField = new javax.swing.JFormattedTextField(createFormatter("U"));
        dKeyField = new javax.swing.JFormattedTextField(createFormatter("U"));
        settingsA = new javax.swing.JLabel();
        settingsB = new javax.swing.JLabel();
        settingsC = new javax.swing.JLabel();
        settingsD = new javax.swing.JLabel();
        BackLabel = new javax.swing.JLabel();
        NextLabel = new javax.swing.JLabel();
        backKeyField = new javax.swing.JFormattedTextField(createFormatter("U"));
        nextKeyField = new javax.swing.JFormattedTextField(createFormatter("U"));
        showAnswerBox = new javax.swing.JCheckBox();
        shortcutsLabel = new javax.swing.JLabel();
        generalLabel = new javax.swing.JLabel();
        timeSpinner = new javax.swing.JSpinner();
        timeLabel = new javax.swing.JLabel();
        examLabel = new javax.swing.JLabel();
        testButton = new javax.swing.JRadioButton();
        clusterButton = new javax.swing.JRadioButton();
        timeDescrption = new javax.swing.JLabel();
        settingsE = new javax.swing.JLabel();
        eKeyField = new javax.swing.JFormattedTextField(createFormatter("U"));
        examHelp = new javax.swing.JLabel();
        answerHelp = new javax.swing.JLabel();
        shortcutsHelp = new javax.swing.JLabel();
        timeHelp = new javax.swing.JLabel();
        soundHelp = new javax.swing.JLabel();
        soundBox = new javax.swing.JCheckBox();
        shuffleHelp = new javax.swing.JLabel();
        scorePanel = new javax.swing.JPanel();
        historyPane = new javax.swing.JScrollPane();
        historyTable = new javax.swing.JTable();
        backButton = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();
        Title = new javax.swing.JLabel();
        titlePanel = new javax.swing.JPanel();
        minimizeButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();
        lblWelcome = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setFileFilter(new FileNameExtensionFilter("Text Files", "txt", "pdf", "doc", "docx"));
        fileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserActionPerformed(evt);
            }
        });

        saveChooser.setAcceptAllFileFilterUsed(false);
        saveChooser.setCurrentDirectory(new File(System.getProperty("user.dir")+"/resources"));
        saveChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        saveChooser.setFileView(new FileView(){
            @Override
            public Boolean isTraversable(File f) {
                return (f.isDirectory() && f.getPath().contains("resources"));
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(Toolkit.getDefaultToolkit().getImage("MC Icon.png"));
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        MainPanel.setBackground(new java.awt.Color(201, 209, 255));
        MainPanel.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new javax.swing.ImageIcon(getClass().getResource("/mc/program/images/border.png")))); // NOI18N
        MainPanel.setPreferredSize(new java.awt.Dimension(874, 512));

        placeholder.setOpaque(false);
        placeholder.setLayout(new java.awt.CardLayout());

        selectionPanel.setBackground(new java.awt.Color(216, 235, 252));
        selectionPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        selectionPanel.setOpaque(false);
        selectionPanel.setPreferredSize(new java.awt.Dimension(600, 499));

        clusterList.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        clusterList.setModel(Cluster.getAllModel());
        clusterList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        clusterList.setSelectedIndex(0);
        clusterList.setSelectionBackground(new java.awt.Color(0, 83, 155));
        clusterList.setSelectionForeground(new java.awt.Color(254, 254, 254));
        clusterListScroll.setViewportView(clusterList);

        resetHistoryButton.setBackground(new java.awt.Color(0, 83, 155));
        resetHistoryButton.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        resetHistoryButton.setForeground(new java.awt.Color(255, 255, 255));
        resetHistoryButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mc/program/images/reset.png"))); // NOI18N
        resetHistoryButton.setText("Reset History");
        resetHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetHistoryButtonActionPerformed(evt);
            }
        });

        settingsButton.setBackground(new java.awt.Color(0, 83, 155));
        settingsButton.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        settingsButton.setForeground(new java.awt.Color(255, 255, 255));
        settingsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mc/program/images/wrench.png"))); // NOI18N
        settingsButton.setText("Settings");
        settingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsButtonActionPerformed(evt);
            }
        });

        goInButton.setBackground(new java.awt.Color(0, 0, 0));
        goInButton.setFont(new java.awt.Font("Tw Cen MT", 1, 36)); // NOI18N
        goInButton.setForeground(new java.awt.Color(255, 255, 255));
        goInButton.setText("LET'S GO");
        goInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goInButtonActionPerformed(evt);
            }
        });

        clusterTable.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        clusterTable.setModel(ClusterList.getModel());
        clusterTable.setOpaque(false);
        clusterTable.setRowHeight(40);
        clusterTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        clusterTable.getTableHeader().setResizingAllowed(false);
        clusterTable.getTableHeader().setReorderingAllowed(false);
        clusterTableScroll.setViewportView(clusterTable);

        importButton.setBackground(new java.awt.Color(0, 83, 155));
        importButton.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        importButton.setForeground(new java.awt.Color(255, 255, 255));
        importButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mc/program/images/import.png"))); // NOI18N
        importButton.setText("Import");
        importButton.setEnabled(false);
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        scoreHistoryButton.setBackground(new java.awt.Color(0, 83, 155));
        scoreHistoryButton.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        scoreHistoryButton.setForeground(new java.awt.Color(255, 255, 255));
        scoreHistoryButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mc/program/images/document.png"))); // NOI18N
        scoreHistoryButton.setText("Score History");
        scoreHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scoreHistoryButtonActionPerformed(evt);
            }
        });

        divider5.setBackground(new java.awt.Color(0, 51, 153));
        divider5.setOpaque(true);

        org.jdesktop.layout.GroupLayout selectionPanelLayout = new org.jdesktop.layout.GroupLayout(selectionPanel);
        selectionPanel.setLayout(selectionPanelLayout);
        selectionPanelLayout.setHorizontalGroup(
            selectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(selectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(selectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(goInButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                    .add(clusterListScroll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .add(selectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(selectionPanelLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(clusterTableScroll))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, selectionPanelLayout.createSequentialGroup()
                        .add(8, 8, 8)
                        .add(selectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(selectionPanelLayout.createSequentialGroup()
                                .add(settingsButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(importButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 104, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(scoreHistoryButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(resetHistoryButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 147, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(divider5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        selectionPanelLayout.setVerticalGroup(
            selectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(selectionPanelLayout.createSequentialGroup()
                .add(selectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(clusterTableScroll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .add(clusterListScroll, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE))
                .add(4, 4, 4)
                .add(selectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(goInButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(selectionPanelLayout.createSequentialGroup()
                        .add(selectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(settingsButton)
                            .add(importButton)
                            .add(scoreHistoryButton)
                            .add(resetHistoryButton))
                        .add(18, 18, 18)
                        .add(divider5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        placeholder.add(selectionPanel, "selectionPanel");

        welcomePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        welcomePanel.setOpaque(false);

        codeField.setText("Enter code here");
        codeField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                codeFieldFocusGained(evt);
            }
        });

        activateButton.setBackground(new java.awt.Color(0, 153, 71));
        activateButton.setFont(new java.awt.Font("Tw Cen MT", 1, 12)); // NOI18N
        activateButton.setForeground(new java.awt.Color(255, 255, 255));
        activateButton.setText("Activate");
        activateButton.setPreferredSize(new java.awt.Dimension(200, 50));
        activateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activateButtonActionPerformed(evt);
            }
        });

        guidePane.setEditable(false);
        guidePane.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        guidePane.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        guidePane.setText("Once you're in the program, choose a test by selecting one from the list on the left. If you want to only look at programs from a certain cluster, select a cluster from the list on the right to only display tests from that cluster. \n\nDon't forget to customize your testing experience! Click on the \"Settings\" button to change your settings. Hover over the \"[?]\" icons to learn more about the different settings you can use.\n\nWhen you're all set up, click the \"LET'S GO\" button to start your test.\n\nAfter you finished your test, you can click on the \"Score History\" button to review your past tests and track your performance.\n");
        jScrollPane1.setViewportView(guidePane);

        activationStatusLabel.setBackground(new java.awt.Color(255, 255, 255));
        activationStatusLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        activationStatusLabel.setText("Activation Status: Waiting for code ...");

        trialButton.setBackground(new java.awt.Color(0, 83, 155));
        trialButton.setFont(new java.awt.Font("Tw Cen MT", 1, 12)); // NOI18N
        trialButton.setForeground(new java.awt.Color(255, 255, 255));
        trialButton.setText("Trial Mode");
        trialButton.setToolTipText("<html>\nUse a trial version of MC Program to see its great features!\n</html>");
        trialButton.setPreferredSize(new java.awt.Dimension(200, 50));
        trialButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trialButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tw Cen MT", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 0, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Welcome to our MC Program!");

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setFont(new java.awt.Font("Calibri", 1, 30)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("START");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout welcomePanelLayout = new org.jdesktop.layout.GroupLayout(welcomePanel);
        welcomePanel.setLayout(welcomePanelLayout);
        welcomePanelLayout.setHorizontalGroup(
            welcomePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(welcomePanelLayout.createSequentialGroup()
                .add(welcomePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(welcomePanelLayout.createSequentialGroup()
                        .add(0, 474, Short.MAX_VALUE)
                        .add(welcomePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, welcomePanelLayout.createSequentialGroup()
                                .add(activationStatusLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, welcomePanelLayout.createSequentialGroup()
                                .add(codeField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 170, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(8, 8, 8)))
                        .add(welcomePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, activateButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(trialButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(welcomePanelLayout.createSequentialGroup()
                        .add(14, 14, 14)
                        .add(welcomePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(0, 11, Short.MAX_VALUE)))
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, welcomePanelLayout.createSequentialGroup()
                .add(0, 0, Short.MAX_VALUE)
                .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(308, 308, 308))
        );
        welcomePanelLayout.setVerticalGroup(
            welcomePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(welcomePanelLayout.createSequentialGroup()
                .add(0, 12, Short.MAX_VALUE)
                .add(welcomePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(activateButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(codeField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(welcomePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(trialButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(activationStatusLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel1)
                .add(18, 18, 18)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 193, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        placeholder.add(welcomePanel, "welcomePanel");

        testPanel.setBackground(selectionPanel.getBackground());
        testPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        testPanel.setOpaque(false);

        aButton.setBackground(new java.awt.Color(0, 153, 71));
        aButton.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        aButton.setForeground(new java.awt.Color(255, 255, 255));
        aButton.setText("A");

        bButton.setBackground(aButton.getBackground());
        bButton.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        bButton.setForeground(new java.awt.Color(255, 255, 255));
        bButton.setText("B");

        cButton.setBackground(aButton.getBackground());
        cButton.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        cButton.setForeground(new java.awt.Color(255, 255, 255));
        cButton.setText("C");

        dButton.setBackground(aButton.getBackground());
        dButton.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        dButton.setForeground(new java.awt.Color(255, 255, 255));
        dButton.setText("D");

        progressBar.setValue(69);

        questionNumber.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        questionNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        questionNumber.setText("69/100");

        pauseToggle.setBackground(new java.awt.Color(0, 83, 155));
        pauseToggle.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        pauseToggle.setForeground(new java.awt.Color(255, 255, 255));
        pauseToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mc/program/images/ico_pause.png"))); // NOI18N
        pauseToggle.setText("Pause");
        pauseToggle.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pauseToggleItemStateChanged(evt);
            }
        });

        testName.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        testName.setText("RFSM-P-05.txt");

        correctLabel.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        correctLabel.setForeground(new java.awt.Color(0, 153, 0));
        correctLabel.setText("Correct: 67");

        incorrectLabel.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        incorrectLabel.setForeground(new java.awt.Color(255, 0, 0));
        incorrectLabel.setText("Incorrect: 1");

        scoreLabel.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        scoreLabel.setText("67/68 -  98.53% ");

        exitButton.setBackground(new java.awt.Color(135, 0, 5));
        exitButton.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        exitButton.setForeground(new java.awt.Color(255, 255, 255));
        exitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mc/program/images/ico_exit.png"))); // NOI18N
        exitButton.setText("Exit Test");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        nextQuestionButton.setBackground(new java.awt.Color(0, 83, 155));
        nextQuestionButton.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        nextQuestionButton.setForeground(new java.awt.Color(255, 255, 255));
        nextQuestionButton.setText("Next Question");
        nextQuestionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextQuestionButtonActionPerformed(evt);
            }
        });

        backToQuestionButton.setBackground(new java.awt.Color(0, 83, 155));
        backToQuestionButton.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        backToQuestionButton.setForeground(new java.awt.Color(255, 255, 255));
        backToQuestionButton.setText("Back to Question");

        nextAnswerButton.setBackground(new java.awt.Color(0, 83, 155));
        nextAnswerButton.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        nextAnswerButton.setForeground(new java.awt.Color(255, 255, 255));
        nextAnswerButton.setText(">");

        backAnswerButton.setBackground(new java.awt.Color(0, 83, 155));
        backAnswerButton.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        backAnswerButton.setForeground(new java.awt.Color(255, 255, 255));
        backAnswerButton.setText("<");
        backAnswerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backAnswerButtonActionPerformed(evt);
            }
        });

        questionText.setEditable(false);
        questionText.setContentType("text/html"); // NOI18N
        questionText.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jScrollPane5.setViewportView(questionText);

        timerPanel.setBackground(selectionPanel.getBackground());
        timerPanel.setLayout(null);

        timeRemaining.setFont(new java.awt.Font("Calibri", 0, 31)); // NOI18N
        timeRemaining.setForeground(new java.awt.Color(255, 255, 255));
        timeRemaining.setText("0:00:15");
        timerPanel.add(timeRemaining);
        timeRemaining.setBounds(30, 20, 100, 30);

        timeBox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mc/program/images/timer.png"))); // NOI18N
        timerPanel.add(timeBox);
        timeBox.setBounds(0, 10, 145, 51);

        answerLabel.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        answerLabel.setText("Answer");

        eButton.setBackground(aButton.getBackground());
        eButton.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        eButton.setForeground(new java.awt.Color(255, 255, 255));
        eButton.setText("E");

        elapsedTimeLabel.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        elapsedTimeLabel.setText("Elapsed Time:");

        elapsedTimeTimer.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        elapsedTimeTimer.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        elapsedTimeTimer.setText("0:00:00");

        org.jdesktop.layout.GroupLayout testPanelLayout = new org.jdesktop.layout.GroupLayout(testPanel);
        testPanel.setLayout(testPanelLayout);
        testPanelLayout.setHorizontalGroup(
            testPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(testPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(testPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(testPanelLayout.createSequentialGroup()
                        .add(testPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(testPanelLayout.createSequentialGroup()
                                .add(aButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(bButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 58, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(cButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 57, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(dButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 57, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(eButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 58, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(testPanelLayout.createSequentialGroup()
                                .add(backToQuestionButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 157, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(nextQuestionButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(testPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(testPanelLayout.createSequentialGroup()
                                .add(elapsedTimeLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(elapsedTimeTimer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 74, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, testPanelLayout.createSequentialGroup()
                                .add(correctLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(incorrectLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(24, 24, 24)
                        .add(testPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(testPanelLayout.createSequentialGroup()
                                .add(pauseToggle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 122, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(exitButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 111, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(0, 0, Short.MAX_VALUE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, testPanelLayout.createSequentialGroup()
                                .add(backAnswerButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(answerLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(nextAnswerButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(scoreLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(testPanelLayout.createSequentialGroup()
                        .add(testPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane5)
                            .add(testPanelLayout.createSequentialGroup()
                                .add(testPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, testPanelLayout.createSequentialGroup()
                                        .add(testName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(questionNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 134, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 614, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 7, Short.MAX_VALUE)
                                .add(timerPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 148, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );

        testPanelLayout.linkSize(new java.awt.Component[] {aButton, bButton, cButton, dButton, eButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        testPanelLayout.setVerticalGroup(
            testPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(testPanelLayout.createSequentialGroup()
                .add(testPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(testPanelLayout.createSequentialGroup()
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(testPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(questionNumber)
                            .add(testName))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(12, 12, 12))
                    .add(timerPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 231, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(testPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(scoreLabel)
                    .add(answerLabel)
                    .add(backAnswerButton)
                    .add(nextAnswerButton)
                    .add(incorrectLabel)
                    .add(correctLabel)
                    .add(backToQuestionButton)
                    .add(nextQuestionButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(testPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(cButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(dButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(aButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(testPanelLayout.createSequentialGroup()
                        .add(testPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(elapsedTimeLabel)
                            .add(elapsedTimeTimer)
                            .add(pauseToggle, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                            .add(exitButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
                        .add(0, 0, Short.MAX_VALUE))
                    .add(eButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(64, 64, 64))
        );

        testPanelLayout.linkSize(new java.awt.Component[] {exitButton, pauseToggle}, org.jdesktop.layout.GroupLayout.VERTICAL);

        testPanelLayout.linkSize(new java.awt.Component[] {answerLabel, backAnswerButton, backToQuestionButton, correctLabel, incorrectLabel, nextAnswerButton, nextQuestionButton, scoreLabel}, org.jdesktop.layout.GroupLayout.VERTICAL);

        placeholder.add(testPanel, "testPanel");

        importerPanel.setBackground(selectionPanel.getBackground());

        previewTextArea.setEditable(false);
        previewTextArea.setColumns(20);
        previewTextArea.setLineWrap(true);
        previewTextArea.setRows(5);
        previewTextArea.setWrapStyleWord(true);
        previewScollPane.setViewportView(previewTextArea);

        previewLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        previewLabel.setText("Preview");

        fileNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        fileNameLabel.setText("File: --");

        selectFileButton.setText("Select File");
        selectFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFileButtonActionPerformed(evt);
            }
        });

        questionIdentifierLabel.setText("Question Identifier:");

        questionIdentifierExample.setText("Ex: 1.");
        questionIdentifierExample.setToolTipText("");

        optionIdentifierLabel.setText("Option Identifier:");

        optionIdentifierExample.setText("Ex: A)");

        answerIdentifierExample.setText("Ex: 1)");

        answerIdentifierLabel.setText("Answer Identifier:");

        answerFormatLabel.setText("Answer Format:");

        answerFormatCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Answer", "Answer + Explanation" }));

        divider0.setBackground(new java.awt.Color(0, 51, 153));
        divider0.setOpaque(true);

        divider1.setBackground(new java.awt.Color(0, 51, 153));
        divider1.setOpaque(true);

        divider2.setBackground(new java.awt.Color(0, 51, 153));
        divider2.setOpaque(true);

        divider3.setBackground(new java.awt.Color(0, 51, 153));
        divider3.setOpaque(true);

        divider4.setBackground(new java.awt.Color(0, 51, 153));
        divider4.setOpaque(true);

        importTestButton.setText("Import Test");
        importTestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importTestButtonActionPerformed(evt);
            }
        });

        saveNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        saveNameLabel.setText("Destination: --");

        saveFileButton.setText("Select Destination");
        saveFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileButtonActionPerformed(evt);
            }
        });

        saveToMainButton.setText("Back to Main Screen");
        saveToMainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToMainButtonActionPerformed(evt);
            }
        });

        numberOfQuestionsLabel.setText("Number of Questions");

        maxNumberOfOptionsLabel.setText("Max. Number of Options");

        questionIdentifierField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                questionIdentifierFieldFocusGained(evt);
            }
        });

        numberOfQuestionsField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                numberOfQuestionsFieldFocusGained(evt);
            }
        });

        optionIdentifierField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                optionIdentifierFieldFocusGained(evt);
            }
        });

        maxNumberOfOptionsField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                maxNumberOfOptionsFieldFocusGained(evt);
            }
        });

        answerIdentifierField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                answerIdentifierFieldFocusGained(evt);
            }
        });

        jLabel2.setText("Max. 5");

        org.jdesktop.layout.GroupLayout importerPanelLayout = new org.jdesktop.layout.GroupLayout(importerPanel);
        importerPanel.setLayout(importerPanelLayout);
        importerPanelLayout.setHorizontalGroup(
            importerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(importerPanelLayout.createSequentialGroup()
                .add(importerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(importerPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(importerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(previewLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                            .add(previewScollPane)))
                    .add(importerPanelLayout.createSequentialGroup()
                        .add(134, 134, 134)
                        .add(saveToMainButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 199, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(importerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(fileNameLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(saveNameLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, importerPanelLayout.createSequentialGroup()
                        .add(0, 12, Short.MAX_VALUE)
                        .add(importTestButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 314, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(importerPanelLayout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(importerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, divider1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, divider0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(divider2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(divider3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(importerPanelLayout.createSequentialGroup()
                                .add(importerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(importerPanelLayout.createSequentialGroup()
                                        .add(selectFileButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                        .add(saveFileButton))
                                    .add(importerPanelLayout.createSequentialGroup()
                                        .add(answerIdentifierField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(18, 18, 18)
                                        .add(answerIdentifierExample))
                                    .add(importerPanelLayout.createSequentialGroup()
                                        .add(6, 6, 6)
                                        .add(answerFormatLabel))
                                    .add(importerPanelLayout.createSequentialGroup()
                                        .add(importerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(importerPanelLayout.createSequentialGroup()
                                                .add(questionIdentifierField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                .add(18, 18, 18)
                                                .add(questionIdentifierExample))
                                            .add(questionIdentifierLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 146, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                        .add(22, 22, 22)
                                        .add(importerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(numberOfQuestionsLabel)
                                            .add(numberOfQuestionsField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                    .add(importerPanelLayout.createSequentialGroup()
                                        .add(importerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(importerPanelLayout.createSequentialGroup()
                                                .add(optionIdentifierField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                .add(18, 18, 18)
                                                .add(optionIdentifierExample))
                                            .add(optionIdentifierLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 157, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                        .add(importerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(maxNumberOfOptionsLabel)
                                            .add(importerPanelLayout.createSequentialGroup()
                                                .add(maxNumberOfOptionsField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                .add(18, 18, 18)
                                                .add(jLabel2))))
                                    .add(answerFormatCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(answerIdentifierLabel)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, divider4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .add(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        importerPanelLayout.setVerticalGroup(
            importerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(importerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(importerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(previewLabel)
                    .add(selectFileButton)
                    .add(saveFileButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(importerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(importerPanelLayout.createSequentialGroup()
                        .add(fileNameLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(saveNameLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(divider0, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(importerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(questionIdentifierLabel)
                            .add(numberOfQuestionsLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(importerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(questionIdentifierExample)
                            .add(questionIdentifierField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(numberOfQuestionsField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(divider1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(importerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(optionIdentifierLabel)
                            .add(maxNumberOfOptionsLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(importerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(optionIdentifierExample)
                            .add(optionIdentifierField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(maxNumberOfOptionsField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel2))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(divider2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(answerIdentifierLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(importerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(answerIdentifierExample)
                            .add(answerIdentifierField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(divider3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(answerFormatLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(answerFormatCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(divider4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(previewScollPane))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(importerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(importTestButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(saveToMainButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        placeholder.add(importerPanel, "importerPanel");

        settingsPanel.setBackground(selectionPanel.getBackground());
        settingsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        settingsPanel.setOpaque(false);
        settingsPanel.setLayout(new java.awt.GridBagLayout());

        shuffleBox.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        shuffleBox.setText("Shuffle Questions");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        settingsPanel.add(shuffleBox, gridBagConstraints);

        saveSettings.setBackground(settingsButton.getBackground());
        saveSettings.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        saveSettings.setForeground(new java.awt.Color(255, 255, 255));
        saveSettings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mc/program/images/save.png"))); // NOI18N
        saveSettings.setText("Save");
        saveSettings.setPreferredSize(new java.awt.Dimension(100, 35));
        saveSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSettingsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 10;
        settingsPanel.add(saveSettings, gridBagConstraints);

        aKeyField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        aKeyField.setText("Q");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 4;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        settingsPanel.add(aKeyField, gridBagConstraints);

        bKeyField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        bKeyField.setText("W");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 4;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        settingsPanel.add(bKeyField, gridBagConstraints);

        cKeyField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        cKeyField.setText("E");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 4;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        settingsPanel.add(cKeyField, gridBagConstraints);

        dKeyField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        dKeyField.setText("R");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 4;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        settingsPanel.add(dKeyField, gridBagConstraints);

        settingsA.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        settingsA.setText("Key: Choice A");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        settingsPanel.add(settingsA, gridBagConstraints);

        settingsB.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        settingsB.setText("Key: Choice B");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        settingsPanel.add(settingsB, gridBagConstraints);

        settingsC.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        settingsC.setText("Key: Choice C");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        settingsPanel.add(settingsC, gridBagConstraints);

        settingsD.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        settingsD.setText("Key: Choice D");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        settingsPanel.add(settingsD, gridBagConstraints);

        BackLabel.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        BackLabel.setText("Answer: Back");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        settingsPanel.add(BackLabel, gridBagConstraints);

        NextLabel.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        NextLabel.setText("Answer: Next");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        settingsPanel.add(NextLabel, gridBagConstraints);

        backKeyField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        backKeyField.setText("D");
        backKeyField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backKeyFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 4;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        settingsPanel.add(backKeyField, gridBagConstraints);

        nextKeyField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        nextKeyField.setText("F");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 4;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        settingsPanel.add(nextKeyField, gridBagConstraints);

        showAnswerBox.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        showAnswerBox.setText("Uncollated Answers");
        showAnswerBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAnswerBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        settingsPanel.add(showAnswerBox, gridBagConstraints);

        shortcutsLabel.setFont(new java.awt.Font("Tw Cen MT", 1, 20)); // NOI18N
        shortcutsLabel.setForeground(new java.awt.Color(0, 83, 155));
        shortcutsLabel.setText("Shortcuts");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        settingsPanel.add(shortcutsLabel, gridBagConstraints);

        generalLabel.setFont(new java.awt.Font("Tw Cen MT", 1, 20)); // NOI18N
        generalLabel.setForeground(new java.awt.Color(0, 83, 155));
        generalLabel.setText("General");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        settingsPanel.add(generalLabel, gridBagConstraints);

        timeSpinner.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        timeSpinner.setModel(new SpinnerNumberModel(20, 0, 59, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        settingsPanel.add(timeSpinner, gridBagConstraints);

        timeLabel.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        timeLabel.setText("Time Limit (per question)          ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        settingsPanel.add(timeLabel, gridBagConstraints);

        examLabel.setFont(new java.awt.Font("Tw Cen MT", 1, 20)); // NOI18N
        examLabel.setForeground(new java.awt.Color(0, 83, 155));
        examLabel.setText("Exam Style");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        settingsPanel.add(examLabel, gridBagConstraints);

        testStyleButtonGroup.add(testButton);
        testButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        testButton.setSelected(true);
        testButton.setText("Single Test");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        settingsPanel.add(testButton, gridBagConstraints);

        testStyleButtonGroup.add(clusterButton);
        clusterButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        clusterButton.setText("Full Cluster");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        settingsPanel.add(clusterButton, gridBagConstraints);

        timeDescrption.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        timeDescrption.setText("seconds");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        settingsPanel.add(timeDescrption, gridBagConstraints);

        settingsE.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        settingsE.setText("Key: Choice E");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        settingsPanel.add(settingsE, gridBagConstraints);

        eKeyField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        eKeyField.setText("T");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 4;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        settingsPanel.add(eKeyField, gridBagConstraints);

        examHelp.setForeground(new java.awt.Color(51, 153, 255));
        examHelp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        examHelp.setText("[?]");
        examHelp.setToolTipText("<html>Single Test Mode: 100 question multiple choice exam.\n\n<br><br>Full Cluster Mode: All multiple choice exams from a selected cluster.</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        settingsPanel.add(examHelp, gridBagConstraints);

        answerHelp.setForeground(new java.awt.Color(51, 153, 255));
        answerHelp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        answerHelp.setText("[?]");
        answerHelp.setToolTipText("<html>Selected: review answers after every question\n\n<br><br>Unselected: review answers after entire test/cluster</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        settingsPanel.add(answerHelp, gridBagConstraints);

        shortcutsHelp.setForeground(new java.awt.Color(51, 153, 255));
        shortcutsHelp.setText("[?]");
        shortcutsHelp.setToolTipText("<html>Keyboard shortcuts. Press each key on your keyboard\n <br>to answer with the associated letter. </html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        settingsPanel.add(shortcutsHelp, gridBagConstraints);

        timeHelp.setForeground(new java.awt.Color(51, 153, 255));
        timeHelp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        timeHelp.setText("[?]              ");
        timeHelp.setToolTipText("<html>\nSets the time limit per question. Running out \n<br>of time equates to a wrong answer. \n<br><br> 1-59 seconds per question.\n<br> 0 disables time limits.</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        settingsPanel.add(timeHelp, gridBagConstraints);

        soundHelp.setForeground(new java.awt.Color(51, 153, 255));
        soundHelp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        soundHelp.setText("[?]");
        soundHelp.setToolTipText("Plays sounds for correct/incorrect answers");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        settingsPanel.add(soundHelp, gridBagConstraints);

        soundBox.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        soundBox.setText("Sound");
        soundBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soundBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        settingsPanel.add(soundBox, gridBagConstraints);

        shuffleHelp.setForeground(new java.awt.Color(51, 153, 255));
        shuffleHelp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        shuffleHelp.setText("[?]");
        shuffleHelp.setToolTipText("Randomizes the order of questions in a cluster or test");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        settingsPanel.add(shuffleHelp, gridBagConstraints);

        placeholder.add(settingsPanel, "settingsPanel");

        scorePanel.setBackground(selectionPanel.getBackground());
        scorePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        scorePanel.setOpaque(false);

        historyPane.setBackground(MainPanel.getBackground());

        historyTable.setBackground(selectionPanel.getBackground());
        historyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        historyTable.setSelectionBackground(new java.awt.Color(0, 83, 155));
        historyPane.setViewportView(historyTable);

        backButton.setBackground(scoreHistoryButton.getBackground());
        backButton.setFont(new java.awt.Font("Tw Cen MT", 1, 14)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout scorePanelLayout = new org.jdesktop.layout.GroupLayout(scorePanel);
        scorePanel.setLayout(scorePanelLayout);
        scorePanelLayout.setHorizontalGroup(
            scorePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(historyPane)
            .add(scorePanelLayout.createSequentialGroup()
                .add(0, 0, Short.MAX_VALUE)
                .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        scorePanelLayout.setVerticalGroup(
            scorePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(scorePanelLayout.createSequentialGroup()
                .add(historyPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 355, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(backButton)
                .addContainerGap())
        );

        placeholder.add(scorePanel, "scorePanel");

        nameLabel.setFont(new java.awt.Font("Vrinda", 1, 14)); // NOI18N
        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nameLabel.setText("Created By Nathan Li and Jeffrey Ying");

        Title.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 36)); // NOI18N
        Title.setForeground(new java.awt.Color(0, 83, 155));
        Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mc/program/images/icon.png"))); // NOI18N
        Title.setText("MC Program 2.0");

        titlePanel.setBackground(new java.awt.Color(0, 0, 204));
        titlePanel.setLayout(null);

        minimizeButton.setBackground(new java.awt.Color(0, 153, 71));
        minimizeButton.setFont(new java.awt.Font("Tw Cen MT", 1, 18)); // NOI18N
        minimizeButton.setForeground(new java.awt.Color(255, 255, 255));
        minimizeButton.setText("-");
        minimizeButton.setBorder(null);
        minimizeButton.setFocusPainted(false);
        minimizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minimizeButtonActionPerformed(evt);
            }
        });
        titlePanel.add(minimizeButton);
        minimizeButton.setBounds(750, 0, 20, 20);

        closeButton.setBackground(new java.awt.Color(153, 0, 5));
        closeButton.setFont(new java.awt.Font("Tw Cen MT", 1, 18)); // NOI18N
        closeButton.setForeground(new java.awt.Color(255, 255, 255));
        closeButton.setText("X");
        closeButton.setBorder(null);
        closeButton.setFocusPainted(false);
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        titlePanel.add(closeButton);
        closeButton.setBounds(772, 0, 20, 20);

        titleLabel.setFont(new java.awt.Font("Tw Cen MT", 1, 14)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 255));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("MC Program 2.0");
        titlePanel.add(titleLabel);
        titleLabel.setBounds(0, 0, 800, 20);

        lblWelcome.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblWelcome.setText("Welcome Guest!");

        jButton2.setBackground(new java.awt.Color(201, 209, 255));
        jButton2.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 0, 255));
        jButton2.setText("<html><a href=\"\">Contact Us</a></html>");
        jButton2.setBorder(null);
        jButton2.setContentAreaFilled(false);
        jButton2.setFocusPainted(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout MainPanelLayout = new org.jdesktop.layout.GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, titlePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(MainPanelLayout.createSequentialGroup()
                .add(199, 199, 199)
                .add(Title, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 388, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(lblWelcome, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 183, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(MainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, placeholder, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, MainPanelLayout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(nameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 539, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(40, 40, 40)
                        .add(jButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(9, 9, 9)))
                .addContainerGap())
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(MainPanelLayout.createSequentialGroup()
                .add(titlePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(MainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(Title, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblWelcome))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(placeholder, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 397, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(MainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(nameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(MainPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 801, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(MainPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(801, 518));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public MainFrame()
    {
        initComponents();
        
        pack();
        
        cardLayout = (CardLayout) placeholder.getLayout(); //allows high elo switching between panels.

        guidePane.setCaretPosition(0);

        setUp();

        enableWindowDragging();

        setButtonActions();

        toSelectionPanel();
        
        modifyForDistribution();

        // <editor-fold defaultstate="collapsed" desc="Cursor code">
        /*Toolkit toolkit = Toolkit.getDefaultToolkit();
         Image image = toolkit.getImage("config/pen.png");
         Cursor c = toolkit.createCustomCursor(image, new Point(MainPanel.getX(),
         MainPanel.getY()), "img");
         MainPanel.setCursor(c);*/
        // </editor-fold>
        
        // <editor-fold defaultstate="collapsed" desc="Expiration code">
        /*
        expire = new Expiration();
        if (expire.first)
        {
            cardLayout.show(Placeholder, "welcomePanel");
        }
        else
        {
            if (!expire.checkValidity()) // good code, bad expiration, need to re-activate
            {
                //invalidActivation();

            }
            else
            {
                //welcome Label
                updateUserLabel();
                toSelectionPanel();
            }
        }
        */
        // </editor-fold>

    }
    
    private void modifyForDistribution()
    {
        
        //importButton.setEnabled(true);
        importButton.setToolTipText(""
            + "We're working out some bugs. You'll be able\n"
            + "to import your own tests in the nearby future.");
        
        codeField.setVisible(false);
        activateButton.setVisible(false);
        activationStatusLabel.setVisible(false);
        trialButton.setVisible(false);
        
        cardLayout.show(placeholder, "welcomePanel");
    }
    
    private void enableWindowDragging()
    {
        titlePanel.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mousePressed(MouseEvent me)
            {
                pX = me.getX();
                pY = me.getY();
            }
        });
        titlePanel.addMouseMotionListener(new MouseAdapter()
        {
            @Override
            public void mouseDragged(MouseEvent me)
            {
                // Set the location
                // get the current location x-co-ordinate and then get
                // the current drag x co-ordinate, add them and subtract most recent
                // mouse pressed x co-ordinate
                // do same for y co-ordinate
                setLocation(getLocation().x + me.getX() - pX, getLocation().y + me.getY() - pY);
            }
        });
    }

    protected MaskFormatter createFormatter(String s)
    {
        MaskFormatter formatter = null;
        try
        {
            formatter = new MaskFormatter(s);
        }
        catch (java.text.ParseException exc)
        {
        }
        return formatter;
    }

    private void toSelectionPanel()
    {
        try
        {
            ClusterList.loadList();
            clusterList.setSelectedIndex(0);
            clusterTable.getColumnModel().getColumn(0).setPreferredWidth(300);
            clusterTable.setRowSelectionInterval(ClusterList.getModel().getRowCount() - 1, ClusterList.getModel().getRowCount() - 1);
            clusterTable.getSelectionModel().addListSelectionListener(new ListSelectionListener()
            {
                @Override
                public void valueChanged(ListSelectionEvent e)
                {
                    ListSelectionModel lsm = (ListSelectionModel) e.getSource();
                    for (int i = lsm.getMinSelectionIndex();i <= lsm.getMaxSelectionIndex();i++)
                    {
                        if (lsm.isSelectedIndex(i) & !e.getValueIsAdjusting())
                        {
                            if (i == ClusterList.getList().size())
                            {
                                clusterList.setModel(Cluster.getAllModel());
                            }
                            else
                            {
                                clusterList.setModel(ClusterList.getList().get(i).getModel());

                            }
                        }
                    }
                    clusterList.setSelectedIndex(0);
                }
            });
        }
        catch (FileNotFoundException | NullPointerException e)
        {
            JOptionPane.showMessageDialog(null, "Error! Multiple choice exams not found.", "There's a problem...", JOptionPane.ERROR_MESSAGE);
            cardLayout.show(placeholder, "selectionPanel");
        }

        try
        {
            Scoring.updateHistory();
        }
        catch (FileNotFoundException e)
        {
            JOptionPane.showMessageDialog(null, "Warning! Score history file not found.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        cardLayout.show(placeholder, "selectionPanel");
    }

    private void setUp()
    {
        //loading config
        Config.loadConfig();

        //tooltips appear instantly
        ToolTipManager.sharedInstance().setInitialDelay(0);

        try
        {
            Updater.updateUpdater();
            if (!Updater.isLatestVersion(Config.getVersion()))
            {
                JOptionPane.showMessageDialog(null, "A new version of this program will be downloaded.", "Update Available", JOptionPane.INFORMATION_MESSAGE);
                Updater.update();
            }
        }
        catch (Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Warning! Unable to connect to website.\n"
                    + " You may use this program offline but it may not be the latest version.", "Warning", JOptionPane.WARNING_MESSAGE);
        }

        shuffleBox.setSelected(Config.getShuffle());
        showAnswerBox.setSelected(Config.getCollate());
        soundBox.setSelected(Config.getSound());

        if (showAnswerBox.isSelected())
        {
            NextLabel.setText("Next Question");
            BackLabel.setText("Back to Question");
        }
        else
        {
            NextLabel.setText("Answer: Next");
            BackLabel.setText("Answer: Back");
        }
        timeSpinner.setValue(Config.getTimePerQuestion());

        // Version
        String programTitle = "MC Program";
        //<font size=6 color=00539B>
        Title.setText(programTitle + " " + Config.getVersion());
        titleLabel.setText(programTitle + " " + Config.getVersion());

        //background for titlebar
        titlePanel.add(new ImagePanel(new ImageIcon(getClass().getResource("images/titlebg.png")).getImage()));
        //icon
        if (Config.getOperatingSystem().contains("MAC"))
        {
            Application.getApplication().setDockIconImage(new ImageIcon(getClass().getResource("images/favicon.png")).getImage());
        }
        else
        {
            setIconImage(new ImageIcon(getClass().getResource("images/favicon.png")).getImage());
        }

        //backgrounds
        String bgPath = "config/background.png";
        //MainPanel.add(new ImagePanel(new ImageIcon(bgPath).getImage()));

        //transparent background for timer
        timerPanel.setBackground(new Color(0, 0, 0, 0));



    }

    private void updateUserLabel()
    {
        lblWelcome.setText("Welcome " + expire.user + "!");
    }

    private void invalidActivation()
    {
        JOptionPane.showMessageDialog(null, "Warning! There appears to have been an issue with your copy of MC Program.\n"
                + "If you believe there was an error, do not hesitate to contact us at www.jying.ca/proj/mc/contact.php.", "Warning", JOptionPane.WARNING_MESSAGE);
    }

    private void setButtonActions()
    {
        aAction = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                checkAnswer("A");
            }
        };
        aButton.setAction(aAction);
        aButton.setText("A");

        bAction = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                checkAnswer("B");
            }
        };
        bButton.setAction(bAction);
        bButton.setText("B");

        cAction = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                checkAnswer("C");
            }
        };
        cButton.setAction(cAction);
        cButton.setText("C");

        dAction = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                checkAnswer("D");
            }
        };
        dButton.setAction(dAction);
        dButton.setText("D");

        eAction = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                checkAnswer("E");
            }
        };
        eButton.setAction(eAction);
        eButton.setText("E");

        nextAAction = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {

                // Display
                currentWrong++;
                showAnswer();
                backAnswerButton.setEnabled(true);

                // Button on/off
                if (currentWrong == 0)
                {
                    backAnswerButton.setEnabled(false);
                }

                if (wrongQuestions.size() == currentWrong + 1)
                {
                    nextAnswerButton.setEnabled(false);
                }

            }
        };
        nextAnswerButton.setAction(nextAAction);
        nextAnswerButton.setText(">");

        nextQAction = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {

                if (Scoring.getCompleted() == currentTest.getQuestionList().size())
                {
                    questionText.setText("Test Complete!");
                    enableQuestionButtons(false);
                }
                else
                {
                    nextQuestion();
                    if (!pauseToggle.isSelected())
                    {
                        Countdown(5);
                    }
                    pauseToggle.setEnabled(true);
                }

            }
        };
        nextQuestionButton.setAction(nextQAction);
        nextQuestionButton.setText("Next Question");

        backAAction = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {

                currentWrong--;
                showAnswer();
                nextAnswerButton.setEnabled(true);

                // Button on/off
                if (currentWrong == 0)
                {
                    backAnswerButton.setEnabled(false);
                }

            }
        };
        backAnswerButton.setAction(backAAction);
        backAnswerButton.setText("<");

        backQAction = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {

                String toDisplay;
                if (backToQuestionButton.getText().equals("Back to Question"))
                {
                    toDisplay = (Scoring.getCompleted()) + ". " + currentTest.getQuestionList().get(Scoring.getCompleted() - 1).getQuestion() + "<br><br>";

                    for (int i = 0;i < currentTest.getQuestionList().get(Scoring.getCompleted() - 1).getChoices().size();i++)
                    {
                        toDisplay += letters.get(i) + ") " + currentTest.getQuestionList().get(Scoring.getCompleted() - 1).getChoices().get(i) + "<br>";
                    }
                    backToQuestionButton.setText("Back to Answer");
                }
                else
                {
                    toDisplay = answerText;
                    backToQuestionButton.setText("Back to Question");
                }

                questionText.setText(toDisplay);

            }
        };
        backToQuestionButton.setAction(backQAction);
        backToQuestionButton.setText("Back to Question");

    }

    public void Countdown(int seconds)
    {

        if (!pauseToggle.isSelected())
        {
            timer = new Timer();
            timer.scheduleAtFixedRate(new TimerTick(timeRemaining), 0, 1000);
        }
    }

    public int toKeyEvent(Character input)
    {
        if (input == 'A')
        {
            return KeyEvent.VK_A;
        }
        else if (input == 'B')
        {
            return KeyEvent.VK_B;
        }
        else if (input == 'C')
        {
            return KeyEvent.VK_C;
        }
        else if (input == 'D')
        {
            return KeyEvent.VK_D;
        }
        else if (input == 'E')
        {
            return KeyEvent.VK_E;
        }
        else if (input == 'F')
        {
            return KeyEvent.VK_F;
        }
        else if (input == 'G')
        {
            return KeyEvent.VK_G;
        }
        else if (input == 'H')
        {
            return KeyEvent.VK_H;
        }
        else if (input == 'I')
        {
            return KeyEvent.VK_I;
        }
        else if (input == 'J')
        {
            return KeyEvent.VK_J;
        }
        else if (input == 'K')
        {
            return KeyEvent.VK_K;
        }
        else if (input == 'L')
        {
            return KeyEvent.VK_L;
        }
        else if (input == 'M')
        {
            return KeyEvent.VK_M;
        }
        else if (input == 'N')
        {
            return KeyEvent.VK_N;
        }
        else if (input == 'O')
        {
            return KeyEvent.VK_O;
        }
        else if (input == 'P')
        {
            return KeyEvent.VK_P;
        }
        else if (input == 'Q')
        {
            return KeyEvent.VK_Q;
        }
        else if (input == 'R')
        {
            return KeyEvent.VK_R;
        }
        else if (input == 'S')
        {
            return KeyEvent.VK_S;
        }
        else if (input == 'T')
        {
            return KeyEvent.VK_T;
        }
        else if (input == 'U')
        {
            return KeyEvent.VK_U;
        }
        else if (input == 'V')
        {
            return KeyEvent.VK_V;
        }
        else if (input == 'W')
        {
            return KeyEvent.VK_W;
        }
        else if (input == 'X')
        {
            return KeyEvent.VK_X;
        }
        else if (input == 'Y')
        {
            return KeyEvent.VK_Y;
        }
        else if (input == 'Z')
        {
            return KeyEvent.VK_Z;
        }
        else
        {
            return -1;
        }
    }

    public void startTest()
    {
        try
        {
            Boolean good = true;

            aKey = aKeyField.getText().charAt(0);
            bKey = bKeyField.getText().charAt(0);
            cKey = cKeyField.getText().charAt(0);
            dKey = dKeyField.getText().charAt(0);
            eKey = eKeyField.getText().charAt(0);
            nextKey = nextKeyField.getText().charAt(0);
            backKey = backKeyField.getText().charAt(0);

            ArrayList<Character> list = new ArrayList<>();
            list.add(aKey);
            list.add(bKey);
            list.add(cKey);
            list.add(dKey);
            list.add(eKey);
            list.add(nextKey);
            list.add(backKey);

            ArrayList<Character> check = new ArrayList<>();

            for (Character list1 : list)
            {
                if (check.contains(list1))
                {
                    good = false;
                    break;
                }
                else
                {
                    check.add(list1);
                }
            }

            if (good)
            {

                aButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).clear();
                aButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(toKeyEvent(aKey), 0), "A");
                aButton.getActionMap().put("A", aAction);

                bButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).clear();
                bButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(toKeyEvent(bKey), 0), "B");
                bButton.getActionMap().put("B", bAction);

                cButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).clear();
                cButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(toKeyEvent(cKey), 0), "C");
                cButton.getActionMap().put("C", cAction);

                dButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).clear();
                dButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(toKeyEvent(dKey), 0), "D");
                dButton.getActionMap().put("D", dAction);

                eButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).clear();
                eButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(toKeyEvent(eKey), 0), "E");
                eButton.getActionMap().put("E", eAction);

                if (Config.getCollate())
                {
                    nextQuestionButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).clear();
                    nextQuestionButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(toKeyEvent(nextKey), 0), "E");
                    nextQuestionButton.getActionMap().put("E", nextQAction);

                    backToQuestionButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).clear();
                    backToQuestionButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(toKeyEvent(backKey), 0), "F");
                    backToQuestionButton.getActionMap().put("F", backQAction);
                }
                else
                {
                    nextAnswerButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).clear();
                    nextAnswerButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(toKeyEvent(nextKey), 0), "E");
                    nextAnswerButton.getActionMap().put("E", nextAAction);

                    backAnswerButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).clear();
                    backAnswerButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(toKeyEvent(backKey), 0), "F");
                    backAnswerButton.getActionMap().put("F", backAAction);
                }

                //shuffle test
                if (Config.getShuffle())
                {
                    currentTest.shuffle();
                }

                Scoring.saved(false);
                wrongQuestions = new ArrayList<>(0);
                wrongSelections = new ArrayList<>(0);

                String toDisplay = (Scoring.getCompleted() + 1) + ". " + currentTest.getQuestionList().get(Scoring.getCompleted()).getQuestion() + "<br><br>";

                for (int i = 0;i < currentTest.getQuestionList().get(Scoring.getCompleted()).getChoices().size();i++)
                {
                    toDisplay += letters.get(i) + ") " + currentTest.getQuestionList().get(Scoring.getCompleted()).getChoices().get(i) + "<br>";
                }

                progressBar.setMinimum(0);
                progressBar.setMaximum(currentTest.getQuestionList().size());

                updateInfo();
                if (Config.getTimePerQuestion() == 0)
                {
                    timeRemaining.setText(" n/a");
                    pauseToggle.setEnabled(false);
                }
                else
                {
                    pauseToggle.setEnabled(true);
                    timeRemaining.setText("0:00:" + String.format("%02d", Config.getTimePerQuestion()));
                    Countdown(5);
                }
                questionText.setText(toDisplay);

                currentWrong = -1;
                enableQuestionButtons(false);
                enableChoiceButtons(true);
                nextAnswerButton.setEnabled(false);
                backAnswerButton.setEnabled(false);

                startingTime = new GregorianCalendar();

                elapsedTime = new Thread()
                {
                    @Override
                    public void run()
                    {
                        while (!Thread.currentThread().isInterrupted())
                        {
                            Calendar currentTime = new GregorianCalendar();
                            int elapsedHour = currentTime.get(Calendar.HOUR) - startingTime.get(Calendar.HOUR);
                            int elapsedMinute = currentTime.get(Calendar.MINUTE) - startingTime.get(Calendar.MINUTE);
                            int elapsedSecond = currentTime.get(Calendar.SECOND) - startingTime.get(Calendar.SECOND);

                            if (elapsedSecond < 0){
                                elapsedSecond+=60;
                                elapsedMinute-=1;
                            }
                            
                            if (elapsedMinute < 0){
                                elapsedMinute +=60;
                                elapsedHour-=1;
                            }
                            if (elapsedHour < 0){
                                elapsedHour+=12;
                            }
                            
                            String totalElapsedTime = String.format("%02d", elapsedHour) + ":"
                                    + String.format("%02d", elapsedMinute) + ":" + String.format("%02d", elapsedSecond);
                            elapsedTimeTimer.setText(totalElapsedTime);
                        }
                    }
                };

                elapsedTime.start();
                switch (currentTest.getQuestionList().get(Scoring.getCompleted()).getChoices().size())
                {
                    case 3:
                        dButton.setEnabled(false);
                    // if it's case 3, the case 4 option will be performed as well. Unique feature of switch (drop through)
                    case 4:
                        eButton.setEnabled(false);
                }

                cardLayout.show(placeholder, "testPanel");
            }
            else
            {
                //startWarningDialog.setLocationRelativeTo(MainPanel);
                JOptionPane.showMessageDialog(null, "You need a unique key for each letter option. Go to 'Settings' and make a change.", "Wait", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        catch (Exception e)
        {
            invalidActivation();
        }
    }

    private void updateInfo()
    {
        double percent;

        // If Scoring.getCompleted() =0, percent=0.00, else do the thing after colon
        percent = ((Scoring.getCompleted() == 0) ? 0.00 : Math.rint((double) Scoring.getCorrect() / (double) Scoring.getCompleted() * 1000) / 10);

        correctLabel.setText("Correct: " + Scoring.getCorrect());
        incorrectLabel.setText("Incorrect: " + (Scoring.getCompleted() - Scoring.getCorrect()));
        scoreLabel.setText(Scoring.getCorrect() + "/" + Scoring.getCompleted() + " - " + percent + "%");
        questionNumber.setText(Scoring.getCompleted() + "/" + currentTest.getQuestionList().size());
        progressBar.setValue(Scoring.getCompleted());
    }

    private void enableChoiceButtons(Boolean b)
    {
        aButton.setEnabled(b);
        bButton.setEnabled(b);
        cButton.setEnabled(b);
        dButton.setEnabled(b);
        eButton.setEnabled(b);
    }

    private void enableQuestionButtons(Boolean b)
    {
        nextQuestionButton.setEnabled(b);
        backToQuestionButton.setEnabled(b);
    }

    public void checkAnswer(String letter)
    {

        String toDisplay = "";

        if (currentTest.getQuestionList().get(Scoring.getCompleted()).getAnsLetter().equals(letter)) // Right answer
        {
            Scoring.setCorrect(Scoring.getCorrect() + 1); // Add to counter
            Sound.playCorrect();
            if (Config.getCollate()) // For showing the answer
            {
                toDisplay = "<font color = green>Correct</font><br><br>";
                enableChoiceButtons(false);

            }
        }
        else // Wrong answer
        {
            wrongQuestions.add(Scoring.getCompleted()); // Storing info
            wrongSelections.add(letter);
            Sound.playWrong();

            if (Config.getCollate()) // For showing answer
            {
                toDisplay = "<font color = red>Incorrect</font><br><br>";
                if (letter.equals("F"))
                {
                    toDisplay += "You ran out of time.<br>";
                }
                else
                {
                    toDisplay += "You selected " + letter + ".<br>";
                }
                enableChoiceButtons(false);
            }

        }

        Scoring.setCompleted(Scoring.getCompleted() + 1);

        //timer
        if (Config.getTimePerQuestion() != 0)
        {
            timeRemaining.setText("0:00:" + String.format("%02d", Config.getTimePerQuestion()));
            if (!pauseToggle.isSelected())
            {
                timer.cancel();
                if ((Scoring.getCompleted() != currentTest.getQuestionList().size()) && (!Config.getCollate()))
                {
                    Countdown(5);
                }
            }
            else
            {
                timeRemaining.setText("0:00:" + String.format("%02d", Config.getTimePerQuestion()));
            }
            if (Scoring.getCompleted() == currentTest.getQuestionList().size())
            {
                timeRemaining.setText("DONE");
                elapsedTime.interrupt();
            }
        }

        if (Config.getCollate())
        {
            toDisplay += "Answer: " + currentTest.getQuestionList().get(Scoring.getCompleted() - 1).getAnsLetter() + "<br><br>";
            toDisplay += currentTest.getQuestionList().get(Scoring.getCompleted() - 1).getAnsDescription();
            questionText.setText(toDisplay); // Set text for answer screen
            questionText.setCaretPosition(0);
            backToQuestionButton.setText("Back to Question");
            enableChoiceButtons(false);
            enableQuestionButtons(true);
            pauseToggle.setEnabled(false);

        }
        else
        {
            if (Scoring.getCompleted() == currentTest.getQuestionList().size())
            {
                if (!Config.getCollate())
                {
                    questionText.setText("Test Complete!");
                    enableChoiceButtons(false);
                    nextAnswerButton.setEnabled(true);
                    pauseToggle.setEnabled(false);
                }
            }
            else
            {
                nextQuestion();
            }
        }

        answerText = toDisplay;
        updateInfo();
    }
    
    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing

        timer.cancel();
        if (elapsedTime != null)
        {
            elapsedTime.interrupt();
        }
        Scoring.saveScore(currentTest);
        Config.saveConfig();
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private String makeTextGreen(String input)
    {
        return "<font color = green>" + input + "</font>";
    }

    private String makeTextRed(String input)
    {
        return "<font color = red>" + input + "</font>";
    }

    private void showAnswer()
    {
        String toDisplay = "<html>" + (wrongQuestions.get(currentWrong) + 1) + ". " + currentTest.getQuestionList().get(wrongQuestions.get(currentWrong)).getQuestion() + "<br><br>";

        boolean outOfTime = true;
        for (int i = 0;i < currentTest.getQuestionList().get(wrongQuestions.get(currentWrong)).getChoices().size();i++)
        {

            String displayedStuff = letters.get(i) + ") " + currentTest.getQuestionList().get(wrongQuestions.get(currentWrong)).getChoices().get(i);
            if (currentTest.getQuestionList().get(wrongQuestions.get(currentWrong)).getAnsLetter().equals(letters.get(i)))
            {
                displayedStuff = makeTextGreen(displayedStuff);
            }
            if (wrongSelections.get(currentWrong).equals(letters.get(i)))
            {
                displayedStuff = makeTextRed(displayedStuff);
                outOfTime = false;

            }
            toDisplay += displayedStuff + "" + "<br>";
        }
        if (outOfTime)
        {
            toDisplay += makeTextRed("Out of Time") + "<br>";
        }

        /*String a = "A) " + currentTest.getQuestionList().get(wrongQuestions.get(currentWrong)).getChoices().get(0);
         String b = "B) " + currentTest.getQuestionList().get(wrongQuestions.get(currentWrong)).getChoices().get(1);
         String c = "C) " + currentTest.getQuestionList().get(wrongQuestions.get(currentWrong)).getChoices().get(2);
         String d = "D) " + currentTest.getQuestionList().get(wrongQuestions.get(currentWrong)).getChoices().get(3);
         String e = "";
         // Make right answer green
         if (currentTest.getQuestionList().get(wrongQuestions.get(currentWrong)).getAnsLetter().equals("A")) {
         a = makeTextGreen(a);
         } else if (currentTest.getQuestionList().get(wrongQuestions.get(currentWrong)).getAnsLetter().equals("B")) {
         b = makeTextGreen(b);
         } else if (currentTest.getQuestionList().get(wrongQuestions.get(currentWrong)).getAnsLetter().equals("C")) {
         c = makeTextGreen(c);
         } else if (currentTest.getQuestionList().get(wrongQuestions.get(currentWrong)).getAnsLetter().equals("D")) {
         d = makeTextGreen(d);
         } else {
         e = makeTextGreen(e);
         }

         // Make selected answer red
         if (wrongSelections.get(currentWrong).equals("A")) {
         a = makeTextRed(a);
         } else if (wrongSelections.get(currentWrong).equals("B")) {
         b = makeTextRed(b);
         } else if (wrongSelections.get(currentWrong).equals("C")) {
         c = makeTextRed(c);
         } else if (wrongSelections.get(currentWrong).equals("D")) {
         d = makeTextRed(d);
         } else {
         d += "<br><br>" + makeTextRed("Ran out of time.");
         }

         //toDisplay += "<br>";
         toDisplay += a + "" + "<br>" + b + "<br>" + c + "<br>" + d + "<br><br>";*/
        toDisplay += "<br>" + currentTest.getQuestionList().get(wrongQuestions.get(currentWrong)).getAnsDescription();
        toDisplay += "</html>";
        questionText.setText(toDisplay);
        questionText.setCaretPosition(0);
    }

    private void nextQuestion()
    {
        String toDisplay = (Scoring.getCompleted() + 1) + ". " + currentTest.getQuestionList().get(Scoring.getCompleted()).getQuestion() + "<br><br>";

        for (int i = 0;i < currentTest.getQuestionList().get(Scoring.getCompleted()).getChoices().size();i++)
        {
            toDisplay += letters.get(i) + ") " + currentTest.getQuestionList().get(Scoring.getCompleted()).getChoices().get(i) + "<br>";
        }

        questionText.setText(toDisplay);
        backToQuestionButton.setText("Back to Question");

        backToQuestionButton.setFocusable(false);
        nextQuestionButton.setFocusable(false);

        enableQuestionButtons(false);
        enableChoiceButtons(true);
        switch (currentTest.getQuestionList().get(Scoring.getCompleted()).getChoices().size())
        {
            case 3:
                dButton.setEnabled(false);
            case 4:
                eButton.setEnabled(false);
        }

    }

    private void showAnswerBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_showAnswerBoxActionPerformed
    {//GEN-HEADEREND:event_showAnswerBoxActionPerformed
        if (showAnswerBox.isSelected())
        {
            NextLabel.setText("Next Question");
            BackLabel.setText("Back to Question");
        }
        else
        {
            NextLabel.setText("Answer: Next");
            BackLabel.setText("Answer: Back");
        }
    }//GEN-LAST:event_showAnswerBoxActionPerformed

    private void resetHistoryButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetHistoryButtonActionPerformed
    {//GEN-HEADEREND:event_resetHistoryButtonActionPerformed

        int resetHistoryDialog = JOptionPane.showConfirmDialog(null, "Are you sure you wish to reset your score history?", "Warning", JOptionPane.YES_NO_OPTION);
        if (resetHistoryDialog == JOptionPane.YES_OPTION)
        {
            try
            {
                Scoring.resetHistory();
                Scoring.updateHistory();
            }
            catch (FileNotFoundException ex)
            {
                JOptionPane.showMessageDialog(null, "There was a problem resetting your score history.", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        }


    }//GEN-LAST:event_resetHistoryButtonActionPerformed

    private void scoreHistoryButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_scoreHistoryButtonActionPerformed
    {//GEN-HEADEREND:event_scoreHistoryButtonActionPerformed
        Scoring.loadTable(historyTable);
        cardLayout.show(placeholder, "scorePanel");
    }//GEN-LAST:event_scoreHistoryButtonActionPerformed

    private void settingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsButtonActionPerformed
        cardLayout.show(placeholder, "settingsPanel");
    }//GEN-LAST:event_settingsButtonActionPerformed

    private void saveSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSettingsActionPerformed
        Config.setShuffle(shuffleBox.isSelected());
        Config.setCollate(showAnswerBox.isSelected());
        Config.setTimePerQuestion(Integer.parseInt(timeSpinner.getValue().toString()));
        Config.setSound(soundBox.isSelected());
        cardLayout.show(placeholder, "selectionPanel");
    }//GEN-LAST:event_saveSettingsActionPerformed

    private void goInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goInButtonActionPerformed
        if (testButton.isSelected())
        {
            reviewCount = 0;
            for (Cluster c : ClusterList.getList())
            {
                try
                {
                    currentTest = new Test((String) clusterList.getSelectedValue(), c.getName());
                }
                catch (FileNotFoundException e)
                {
                }
            }

            testName.setText((String) clusterList.getSelectedValue());

            startTest();
        }
        else
        {
            ArrayList<Test> clusterTests = new ArrayList<>();
            String cluster = "";

            //If it's the last row of the table, Cluster is "All"
            if (clusterTable.getSelectedRow() == ClusterList.getList().size())
            {
                cluster = "All";
                for (Cluster c : ClusterList.getList())
                {
                    for (Object testFileName : c.getExams())
                    {
                        try
                        {
                            Test test = new Test((String) testFileName, c.getName());
                            clusterTests.add(test);
                        }
                        catch (FileNotFoundException ex)
                        {
                            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
            else
            {
                // Else just find the selected row and find the cluster
                for (Object s : ClusterList.getList().get(clusterTable.getSelectedRow()).getExams())
                {
                    cluster = ClusterList.getList().get(clusterTable.getSelectedRow()).getName();
                    try
                    {
                        Test test = new Test((String) s,
                                ClusterList.getList().get(clusterTable.getSelectedRow()).getName());
                        clusterTests.add(test);
                    }
                    catch (FileNotFoundException ex)
                    {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

            Test[] tests = new Test[clusterTests.size()];

            for (int i = 0;i < clusterTests.size();i++)
            {
                tests[i] = clusterTests.get(i);
            }

            currentTest = new Test(tests, cluster);
            testName.setText(cluster);

            startTest();
        }
    }//GEN-LAST:event_goInButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        try
        {
            Scoring.saveScore(currentTest);
            Scoring.updateHistory();
        }
        catch (FileNotFoundException ex)
        {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        elapsedTime.interrupt();
        timer.cancel();
        Scoring.setCompleted(0);
        Scoring.setCorrect(0);
        cardLayout.show(placeholder, "selectionPanel");
    }//GEN-LAST:event_exitButtonActionPerformed

    private void pauseToggleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_pauseToggleItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
            timer.cancel();
        }
        else
        {
            Countdown(5);
        }
    }//GEN-LAST:event_pauseToggleItemStateChanged

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        cardLayout.show(placeholder, "selectionPanel");
    }//GEN-LAST:event_backButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_closeButtonActionPerformed

    private void minimizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minimizeButtonActionPerformed
        setState(ICONIFIED);
    }//GEN-LAST:event_minimizeButtonActionPerformed

    private void soundBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soundBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_soundBoxActionPerformed

    private void activateButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_activateButtonActionPerformed
    {//GEN-HEADEREND:event_activateButtonActionPerformed
        try
        {
            Activation activate = new Activation(codeField.getText());

            if (activate.activated) // worked
            {
                Config.setTrial(false);
                expire.setUser(codeField.getText());
                expire.createSystemKeyFile();
                expire.resetError();
                updateUserLabel();

               /* if (!Config.hasLatestResources())
                {
                    JOptionPane.showMessageDialog(null, "Press OK to download new MCs. The screen may freeze for a few seconds.", "Information", JOptionPane.INFORMATION_MESSAGE);
                    Updater.downloadResources();
                    Config.setResources(true);
                    JOptionPane.showMessageDialog(null, "MC downloading completed.", "Information", JOptionPane.INFORMATION_MESSAGE);
                }*/

                toSelectionPanel();

            }
            else // failed
            {
                JOptionPane.showMessageDialog(null, "Activation Failed. " + activate.failureStatus, "Warning", JOptionPane.WARNING_MESSAGE);

            }
        }
        catch (Exception ex)
        {
            JOptionPane.showMessageDialog(null, "There was a problem with your activation.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_activateButtonActionPerformed

    private void trialButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_trialButtonActionPerformed
    {//GEN-HEADEREND:event_trialButtonActionPerformed
        Config.setTrial(true);
        toSelectionPanel();

    }//GEN-LAST:event_trialButtonActionPerformed

    private void codeFieldFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_codeFieldFocusGained
    {//GEN-HEADEREND:event_codeFieldFocusGained
        if (codeField.getText().equals("Enter code here"))
        {
            codeField.setText("");
        }
    }//GEN-LAST:event_codeFieldFocusGained

    private void backAnswerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backAnswerButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_backAnswerButtonActionPerformed

    private void nextQuestionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextQuestionButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nextQuestionButtonActionPerformed

    private void fileChooserActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_fileChooserActionPerformed
    {//GEN-HEADEREND:event_fileChooserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileChooserActionPerformed

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_importButtonActionPerformed
    {//GEN-HEADEREND:event_importButtonActionPerformed
        resetImporterInformation();

        cardLayout.show(placeholder, "importerPanel");
    }//GEN-LAST:event_importButtonActionPerformed

    private void saveToMainButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveToMainButtonActionPerformed
    {//GEN-HEADEREND:event_saveToMainButtonActionPerformed
        cardLayout.show(placeholder, "selectionPanel");
    }//GEN-LAST:event_saveToMainButtonActionPerformed

    private void saveFileButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveFileButtonActionPerformed
    {//GEN-HEADEREND:event_saveFileButtonActionPerformed
        saveChooser.setVisible(true);
        int returnVal = saveChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            File destinationfile = saveChooser.getSelectedFile();
            saveNameLabel.setText("Destination: " + destinationfile.getName());

            saveFile = destinationfile;

            //System.out.println(saveFile);
        }
        else
        {
            //System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_saveFileButtonActionPerformed

    private void selectFileButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectFileButtonActionPerformed
    {//GEN-HEADEREND:event_selectFileButtonActionPerformed
        fileChooser.setVisible(true);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            // Show name of file
            File textFile = fileChooser.getSelectedFile();
            fileNameLabel.setText("File: " + textFile.getName());

            // Import file
            importFile = textFile;
            importer = new Importer(importFile);
            importer.importTest();

            // Display file
            previewTextArea.setText(importer.getPreview(importer.sourceText.size()));
            previewTextArea.setCaretPosition(0);

            //System.out.println(importFile.getName());
        }
        else
        {
            //System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_selectFileButtonActionPerformed

    private void importTestButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_importTestButtonActionPerformed
    {//GEN-HEADEREND:event_importTestButtonActionPerformed
        // Check information
        if (checkImporterInformation())
        {
            importer = new Importer(importFile);
            importer.importTest();

            importer.setQuestionIdentifier(questionIdentifierField.getText());
            importer.setNumberOfQuestions(Integer.parseInt(numberOfQuestionsField.getText()));
            importer.setOptionIdentifier(optionIdentifierField.getText());
            importer.setMaxNumberOfOptions(Integer.parseInt(maxNumberOfOptionsField.getText()));
            importer.setAnwserIdentifier(answerIdentifierField.getText());
            importer.setAnswerFormat((String) answerFormatCombo.getSelectedItem());

            if (importer.convertTest())
            {
                if (importer.saveTest(saveFile))
                {
                    JOptionPane.showMessageDialog(this, "Successful Import!");
                    resetImporterInformation();

                    // Code to update front screen
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "There appears to be an issue when trying to save the file.\n"
                            + "This shouldn't be happening");
                }

            }
            else
            {
                JOptionPane.showMessageDialog(this, "There appears to be an issue with the file you selected.\n"
                        + "Please ensure it has appropriate formatting.");
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, missingImporterInformation());
        }
    }//GEN-LAST:event_importTestButtonActionPerformed

    private void questionIdentifierFieldFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_questionIdentifierFieldFocusGained
    {//GEN-HEADEREND:event_questionIdentifierFieldFocusGained
        questionIdentifierField.setCaretPosition(0);
    }//GEN-LAST:event_questionIdentifierFieldFocusGained

    private void numberOfQuestionsFieldFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_numberOfQuestionsFieldFocusGained
    {//GEN-HEADEREND:event_numberOfQuestionsFieldFocusGained
        numberOfQuestionsField.setCaretPosition(0);
    }//GEN-LAST:event_numberOfQuestionsFieldFocusGained

    private void optionIdentifierFieldFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_optionIdentifierFieldFocusGained
    {//GEN-HEADEREND:event_optionIdentifierFieldFocusGained
        optionIdentifierField.setCaretPosition(0);
    }//GEN-LAST:event_optionIdentifierFieldFocusGained

    private void maxNumberOfOptionsFieldFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_maxNumberOfOptionsFieldFocusGained
    {//GEN-HEADEREND:event_maxNumberOfOptionsFieldFocusGained
        maxNumberOfOptionsField.setCaretPosition(0);
    }//GEN-LAST:event_maxNumberOfOptionsFieldFocusGained

    private void answerIdentifierFieldFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_answerIdentifierFieldFocusGained
    {//GEN-HEADEREND:event_answerIdentifierFieldFocusGained
        answerIdentifierField.setCaretPosition(0);
    }//GEN-LAST:event_answerIdentifierFieldFocusGained

    private void backKeyFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_backKeyFieldActionPerformed
    {//GEN-HEADEREND:event_backKeyFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_backKeyFieldActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        cardLayout.show(placeholder, "selectionPanel");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try 
        {
            Desktop.getDesktop().browse(new URL("http://jying.ca/proj/mc/contact.php").toURI());
        }           
        catch (Exception e) {}
    }//GEN-LAST:event_jButton2ActionPerformed

    private Boolean checkImporterInformation()
    {
        Boolean hasFile = (importFile != null);
        Boolean hasSave = (saveFile != null);
        Boolean hasQI = (!questionIdentifierField.getText().equals(""));
        Boolean hasNOQ = (!numberOfQuestionsField.getText().equals(""));
        Boolean hasOI = (!optionIdentifierField.getText().equals(""));
        Boolean hasMNOO = (!maxNumberOfOptionsField.getText().equals(""));
        Boolean hasAI = (!answerIdentifierField.getText().equals(""));

        return (hasFile && hasSave && hasQI && hasNOQ && hasOI && hasMNOO && hasAI);
    }

    private String missingImporterInformation()
    {
        String output = "Please ensure you have:";

        Boolean hasFile = (importFile != null);
        Boolean hasSave = (saveFile != null);
        Boolean hasQI = (!questionIdentifierField.getText().equals(""));
        Boolean hasNOQ = (!numberOfQuestionsField.getText().equals(""));
        Boolean hasOI = (!optionIdentifierField.getText().equals(""));
        Boolean hasMNOO = (!maxNumberOfOptionsField.getText().equals(""));
        Boolean hasAI = (!answerIdentifierField.getText().equals(""));

        if (!hasFile)
        {
            output += "\n-selected a file to import";
        }

        if (!hasSave)
        {
            output += "\n-selected a destination to save to";
        }

        if (!(hasQI && hasNOQ && hasOI && hasMNOO && hasAI))
        {
            output += "\n-filled out all fields";
        }

        return output;
    }

    private void resetImporterInformation()
    {
        importFile = null;
        fileNameLabel.setText("File: --");

        saveFile = null;
        saveNameLabel.setText("Destination: --");

        questionIdentifierField.setText("");
        numberOfQuestionsField.setText("");
        optionIdentifierField.setText("");
        maxNumberOfOptionsField.setText("");
        answerIdentifierField.setText("");

        answerFormatCombo.setSelectedIndex(0);

        previewTextArea.setText("*************************Source Text Example*************************\n\n"
                + "1. What is the limit of 1/x as x approaches 0?\n"
                + "A) positive infinity\n"
                + "B) negative infinity\n"
                + "C) 0\n"
                + "D) 1\n"
                + "E) The limit does not exist\n"
                + ".\n"
                + "(More questions here)\n"
                + ".\n"
                + "\n"
                + "1) E\n"
                + ".\n"
                + "(More answers here)\n"
                + ".\n"
                + "\n"
                + "(For this test: 1. is the question identifier, A) is the option identifier,\n"
                + "1) is the answer identifier, 5 is the max number of options, \n"
                + "and 'Answer' is the answer format)");
        previewTextArea.setCaretPosition(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BackLabel;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JLabel NextLabel;
    private javax.swing.JLabel Title;
    private javax.swing.JButton aButton;
    private javax.swing.JFormattedTextField aKeyField;
    private javax.swing.JButton activateButton;
    private javax.swing.JLabel activationStatusLabel;
    private javax.swing.JComboBox answerFormatCombo;
    private javax.swing.JLabel answerFormatLabel;
    private javax.swing.JLabel answerHelp;
    private javax.swing.JLabel answerIdentifierExample;
    private javax.swing.JFormattedTextField answerIdentifierField;
    private javax.swing.JLabel answerIdentifierLabel;
    private javax.swing.JLabel answerLabel;
    private javax.swing.JButton bButton;
    private javax.swing.JFormattedTextField bKeyField;
    private javax.swing.JButton backAnswerButton;
    private javax.swing.JButton backButton;
    private javax.swing.JFormattedTextField backKeyField;
    private javax.swing.JButton backToQuestionButton;
    private javax.swing.JButton cButton;
    private javax.swing.JFormattedTextField cKeyField;
    private javax.swing.JButton closeButton;
    private javax.swing.JRadioButton clusterButton;
    private javax.swing.JList clusterList;
    private javax.swing.JScrollPane clusterListScroll;
    private javax.swing.JTable clusterTable;
    private javax.swing.JScrollPane clusterTableScroll;
    private javax.swing.JTextField codeField;
    private javax.swing.JLabel correctLabel;
    private javax.swing.JButton dButton;
    private javax.swing.JFormattedTextField dKeyField;
    private javax.swing.JLabel divider0;
    private javax.swing.JLabel divider1;
    private javax.swing.JLabel divider2;
    private javax.swing.JLabel divider3;
    private javax.swing.JLabel divider4;
    private javax.swing.JLabel divider5;
    private javax.swing.JButton eButton;
    private javax.swing.JFormattedTextField eKeyField;
    private javax.swing.JLabel elapsedTimeLabel;
    private javax.swing.JLabel elapsedTimeTimer;
    private javax.swing.JLabel examHelp;
    private javax.swing.JLabel examLabel;
    private javax.swing.JButton exitButton;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel fileNameLabel;
    private javax.swing.JLabel generalLabel;
    private javax.swing.JButton goInButton;
    private javax.swing.JTextPane guidePane;
    private javax.swing.JScrollPane historyPane;
    private javax.swing.JTable historyTable;
    private javax.swing.JButton importButton;
    private javax.swing.JButton importTestButton;
    private javax.swing.JPanel importerPanel;
    private javax.swing.JLabel incorrectLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblWelcome;
    private javax.swing.JFormattedTextField maxNumberOfOptionsField;
    private javax.swing.JLabel maxNumberOfOptionsLabel;
    private javax.swing.JButton minimizeButton;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton nextAnswerButton;
    private javax.swing.JFormattedTextField nextKeyField;
    private javax.swing.JButton nextQuestionButton;
    private javax.swing.JFormattedTextField numberOfQuestionsField;
    private javax.swing.JLabel numberOfQuestionsLabel;
    private javax.swing.JLabel optionIdentifierExample;
    private javax.swing.JFormattedTextField optionIdentifierField;
    private javax.swing.JLabel optionIdentifierLabel;
    private javax.swing.JToggleButton pauseToggle;
    private javax.swing.JPanel placeholder;
    private javax.swing.JLabel previewLabel;
    private javax.swing.JScrollPane previewScollPane;
    private javax.swing.JTextArea previewTextArea;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel questionIdentifierExample;
    private javax.swing.JFormattedTextField questionIdentifierField;
    private javax.swing.JLabel questionIdentifierLabel;
    private javax.swing.JLabel questionNumber;
    private javax.swing.JTextPane questionText;
    private javax.swing.JButton resetHistoryButton;
    private javax.swing.JFileChooser saveChooser;
    private javax.swing.JButton saveFileButton;
    private javax.swing.JLabel saveNameLabel;
    private javax.swing.JButton saveSettings;
    private javax.swing.JButton saveToMainButton;
    private javax.swing.JButton scoreHistoryButton;
    private javax.swing.JLabel scoreLabel;
    private javax.swing.JPanel scorePanel;
    private javax.swing.JButton selectFileButton;
    private javax.swing.JPanel selectionPanel;
    private javax.swing.JLabel settingsA;
    private javax.swing.JLabel settingsB;
    private javax.swing.JButton settingsButton;
    private javax.swing.JLabel settingsC;
    private javax.swing.JLabel settingsD;
    private javax.swing.JLabel settingsE;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JLabel shortcutsHelp;
    private javax.swing.JLabel shortcutsLabel;
    private javax.swing.JCheckBox showAnswerBox;
    private javax.swing.JCheckBox shuffleBox;
    private javax.swing.JLabel shuffleHelp;
    private javax.swing.JCheckBox soundBox;
    private javax.swing.JLabel soundHelp;
    private javax.swing.JRadioButton testButton;
    private javax.swing.JLabel testName;
    private javax.swing.JPanel testPanel;
    private javax.swing.ButtonGroup testStyleButtonGroup;
    private javax.swing.JLabel timeBox;
    private javax.swing.JLabel timeDescrption;
    private javax.swing.JLabel timeHelp;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JLabel timeRemaining;
    private javax.swing.JSpinner timeSpinner;
    private javax.swing.JPanel timerPanel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel titlePanel;
    private javax.swing.JButton trialButton;
    private javax.swing.JPanel welcomePanel;
    // End of variables declaration//GEN-END:variables
}
